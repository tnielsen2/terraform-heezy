name: Terraform production-heezy
run-name: Terraform production-heezy - ${{ github.actor }} - ${{ github.sha }}

on:
  push:
    branches: [main]
    paths: ['environments/production/heezy/**']
  pull_request:
    branches: [main]
    paths: ['environments/production/heezy/**']
  workflow_dispatch:

concurrency:
  group: terraform-production-heezy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  get-runner-credentials:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      runner-access-key: ${{ steps.get-creds.outputs.access-key }}
      runner-secret-key: ${{ steps.get-creds.outputs.secret-key }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_NUMBER }}:role/GitHubActions-MultiRepo
          aws-region: us-east-2

      - name: Get runner credentials from AWS Secrets
        id: get-creds
        run: |
          set +x
          CREDS=$(aws secretsmanager get-secret-value --secret-id production/heezy/github_runner/aws_credentials --query SecretString --output text)
          ACCESS_KEY=$(echo $CREDS | jq -r '.AWS_ACCESS_KEY_ID')
          SECRET_KEY=$(echo $CREDS | jq -r '.AWS_SECRET_ACCESS_KEY')
          echo "access-key=$ACCESS_KEY" >> $GITHUB_OUTPUT
          echo "secret-key=$SECRET_KEY" >> $GITHUB_OUTPUT

  terraform-plan:
    needs: [get-runner-credentials]
    runs-on: self-hosted
    timeout-minutes: 180
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Init and Plan
        working-directory: environments/production/heezy
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.get-runner-credentials.outputs.runner-access-key }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.get-runner-credentials.outputs.runner-secret-key }}
        run: |
          set +x
          TERRAFORM_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_NUMBER }}:role/productionATerraformStateBackend --role-session-name terraform-session)
          
          export AWS_ACCESS_KEY_ID=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_SESSION_TOKEN"
          
          set -x
          terraform init
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('environments/production/heezy/plan.txt', 'utf8');
            const body = `## Terraform Plan - production-heezy
            \`\`\`
            ${plan}
            \`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  terraform-apply:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: [get-runner-credentials, terraform-plan]
    runs-on: self-hosted
    timeout-minutes: 180
    environment: production
    concurrency:
      group: terraform-deploy-production-heezy
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Init and Apply
        working-directory: environments/production/heezy
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.get-runner-credentials.outputs.runner-access-key }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.get-runner-credentials.outputs.runner-secret-key }}
        run: |
          set +x
          TERRAFORM_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_NUMBER }}:role/productionATerraformStateBackend --role-session-name terraform-session)
          
          export AWS_ACCESS_KEY_ID=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $TERRAFORM_CREDS | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_SESSION_TOKEN"
          
          set -x
          terraform init
          terraform apply -auto-approve tfplan
